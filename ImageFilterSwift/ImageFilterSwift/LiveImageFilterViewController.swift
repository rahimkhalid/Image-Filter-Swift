//
//  LiveImageFilterViewController.swift
//  RahimRepo
//
//  Created by vd-rahim on 5/26/18.
//  Copyright Â© 2018 Rahim. All rights reserved.
//

import UIKit
import Photos

class LiveImageFilterViewController: UIViewController {

    @IBOutlet weak var collectionViewHeight: NSLayoutConstraint!
    @IBOutlet weak var filterImageCollectionView: UICollectionView!
    @IBOutlet weak var filterTopView: UIView!
    @IBOutlet fileprivate var captureButton: UIButton!
    
    @IBOutlet weak var previewBottomConstraint: NSLayoutConstraint!
    @IBOutlet weak var previewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var photoPreviewView: UIImageView!
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    override var prefersStatusBarHidden: Bool { return true }
    var cameraService = CameraService()
    @IBOutlet weak var captureButtonInnerView: UIView!
    @IBOutlet weak var largeCenterDisplay: UILabel!
    
    private var isFilterEnable:Bool = false
    var timer:Timer = Timer()
    var countDownTimer:Timer = Timer()
    var index = 0
    
    var CIFilterNames = [
        "Default",
        "CILinearToSRGBToneCurve",
        "CISRGBToneCurveToLinear",
        "CIColorInvert",
        "CIColorMonochrome",
        "CIColorPosterize",
        "CIFalseColor",
        "CIMaskToAlpha",
        "CIMaximumComponent",
        "CIMinimumComponent",
        "CIPhotoEffectChrome",
        "CIPhotoEffectFade",
        "CIPhotoEffectInstant",
        "CIPhotoEffectMono",
        "CIPhotoEffectNoir",
        "CIPhotoEffectProcess",
        "CIPhotoEffectTonal",
        "CIPhotoEffectTransfer",
        "CISepiaTone",
        "CIVignette",
        "CICMYKHalftone",
        "CIDotScreen",
        "CIHatchedScreen",
        "CILineScreen",
        "CIComicEffect",
        "CICrystallize",
        "CIEdges",
        "CIEdgeWork",
        "CIHeightFieldFromMask",
        "CIHexagonalPixellate"
    ]
    
    override func viewDidLoad() {
        
        self.cameraService.updateFilter(filter: CIFilterNames[index])
        self.cameraService.delegate = self
        setupCollectionView()
        do {
            try self.cameraService.setupDevice()
        }
            
        catch {
            print(error)
        }
        
        self.cameraService.setupInputOutput()
        
        self.navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    func setupCollectionView(){
        let nib = UINib(nibName: "FilterCollectionViewCell", bundle: nil)
        filterImageCollectionView.register(nib, forCellWithReuseIdentifier: "filterCell")
    }
    
    @IBAction func timerButton(_ sender: UIButton) {
        countDownTimer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(self.updateTime), userInfo: nil, repeats: true);
        
        timer = Timer.scheduledTimer(timeInterval: 5, target: self, selector: #selector(self.captureImage), userInfo: nil, repeats: false);
    }
    
    @IBAction func filterButtonTapped(_ sender: UIButton) {
        if isFilterEnable{
            UIView.animate(withDuration: 0.5) {
                self.collectionViewHeight.constant = 0
                self.previewTopConstraint.constant = 0
                self.previewBottomConstraint.constant = 0
                self.view.layoutIfNeeded()
            }
            isFilterEnable = false
            cameraService.updateFilter(filter: CIFilterNames[0])
        }else{
            UIView.animate(withDuration: 0.5) {
                self.collectionViewHeight.constant = 60
                self.previewTopConstraint.constant = -60.0
                self.previewBottomConstraint.constant = 60.0
                self.view.layoutIfNeeded()
            }
            isFilterEnable = true
            cameraService.updateFilter(filter: CIFilterNames[index])
        }
        
    }
    
    @objc func updateTime(){
        largeCenterDisplay.text = "\(Int(timer.fireDate.timeIntervalSinceNow)+1)"
    }
    
    @IBAction func captureImage(_ sender: UIButton) {
        guard let image = photoPreviewView.image else {
            print("Image capture error")
            return
        }
        
        try? PHPhotoLibrary.shared().performChangesAndWait {
            PHAssetChangeRequest.creationRequestForAsset(from: image)
            self.timer.invalidate()
            self.countDownTimer.invalidate()
            self.largeCenterDisplay.text = ""
        }
    }
    
    @IBAction func leftGesture(_ sender: Any) {
        if isFilterEnable{
            if index + 1 == CIFilterNames.count - 1{
                filterImageCollectionView.scrollToItem(at: IndexPath(row: 0, section: 0), at: .left, animated: true)
            }
            index = (index+1) % (CIFilterNames.count-1)
            cameraService.updateFilter(filter: CIFilterNames[index])
            let lastCell = filterImageCollectionView.visibleCells.last as! FilterCollectionViewCell
            if lastCell.indexPath.row < index{
                filterImageCollectionView.scrollToItem(at: IndexPath(row: index, section: 0), at: .right, animated: true)
            }
            filterImageCollectionView.reloadData()
        }
    }
    
    
    @IBAction func rightGesture(_ sender: Any) {
        if isFilterEnable{
            if index == 0{
                index = CIFilterNames.count - 1
                filterImageCollectionView.scrollToItem(at: IndexPath(row: index, section: 0), at: .left, animated: true)
            }else{
                index = (index-1) % (CIFilterNames.count-1)
                cameraService.updateFilter(filter: CIFilterNames[index])
                
                let lastCell = filterImageCollectionView.visibleCells.first as! FilterCollectionViewCell
                if lastCell.indexPath.row > index{
                    filterImageCollectionView.scrollToItem(at: IndexPath(row: index, section: 0), at: .left, animated: true)
                }
            }
            filterImageCollectionView.reloadData()
        }
    }

}

extension LiveImageFilterViewController: photoCaptureDelegate{
    func previewFilteredImage(image: UIImage) {
        DispatchQueue.main.async {
            self.photoPreviewView.image = image
        }
        
    }
}

extension LiveImageFilterViewController : UICollectionViewDelegate, UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return CIFilterNames.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "filterCell", for: indexPath) as! FilterCollectionViewCell
        if indexPath.row == 0{
            cell.populateCell(with: #imageLiteral(resourceName: "Andrew-Suryono"), at: indexPath)
        }else{
            let inputCIImage = CIImage(image: #imageLiteral(resourceName: "Andrew-Suryono"))!
            let filter = CIFilter(name: CIFilterNames[indexPath.row])
            filter!.setValue(inputCIImage, forKey: kCIInputImageKey)
            let cgImage = CIContext().createCGImage(filter!.outputImage!, from: (inputCIImage.extent))!
            
            cell.populateCell(with: UIImage(cgImage: cgImage),at: indexPath)
        }
        if indexPath.row == index{
            cell.isFilterSelected()
        }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        index = indexPath.row
        cameraService.updateFilter(filter: CIFilterNames[index])
        filterImageCollectionView.reloadData()
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 40, height: 60)
    }
}
